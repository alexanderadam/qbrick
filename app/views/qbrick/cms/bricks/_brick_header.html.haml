.btn__group
  - if brick_content.present? || brick.user_can_save?
    .btn.btn--icon.js-resize-toggler{ 'data-toggle' => 'collapse', 'data-target' => "#brick-content-#{brick.id}" }
      - streusel_icon('remove')
%h2
  - if brick.caption.present?
    = brick.caption
  %span
    = brick.backend_label(parenthesis: true)

.btn__group.brick__item-actions
  - if brick.persisted?

    - # addable child dropdown menu
    - if brick.respond_to?(:brick_list)
      = render('brick_type_dropdown', brick_list: brick)

    - # grid selection
    - if brick.class.include? Qbrick::Gridded
      .dropdown
        %button.btn.btn--icon.dropdown__toggle{ 'data-toggle' => 'dropdown', type: 'button', aria: {expanded: 'false', haspopup: 'true' }}
          - streusel_icon('settings')
        %ul.dropdown__menu{role: 'menu'}
          %li
            = form.input :col_count, collection: brick.class.available_grid_sizes, as: :radio_buttons, label_method: lambda { |col_count| t("qbrick.cms.bricks.columns", count: col_count) }

    - # possible styles
    - unless brick.available_display_styles.empty?
      #display-styles
        .dropdown
        %button.btn.btn--icon.dropdown_toggle{ 'data-toggle' => 'dropdown', type: 'button', aria: {expanded: 'false', haspopup: 'true' }}
          - streusel_icon('settings')
        %ul.dropdown__menu{role: 'menu'}
          %li
            = form.input :display_styles, collection: brick.translated_available_display_styles, as: :check_boxes

    -# delete button
    - if brick.user_can_delete?
      = link_to qbrick.cms_brick_path(brick), class: 'btn btn--icon btn--delete', data: { confirm: t('qbrick.cms.bricks.brick_item.confirm') }, method: :delete, remote: true do
        - streusel_icon('trash')
